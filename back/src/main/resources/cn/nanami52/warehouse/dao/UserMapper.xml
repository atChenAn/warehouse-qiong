<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.nanami52.warehouse.dao.UserMapper">
    <resultMap id="BaseResultMap" type="cn.nanami52.warehouse.entity.User">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="user_auth" property="userAuth" jdbcType="INTEGER"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="BIGINT"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="is_del" property="isDel" jdbcType="TINYINT"/>
        <result column="groupId" property="groupId" jdbcType="TINYINT"/>
        <result column="group_name" property="groupName" jdbcType="TINYINT"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, username, password, user_auth, nick_name, create_time, status, is_del
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user
    where id = #{id,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" parameterType="cn.nanami52.warehouse.entity.User">
    insert into user (id, username, password, 
      user_auth, nick_name, create_time, 
      status, is_del)
    values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{userAuth,jdbcType=INTEGER}, #{nickName,jdbcType=VARCHAR}, #{createTime,jdbcType=BIGINT}, 
      #{status,jdbcType=INTEGER}, #{isDel,jdbcType=TINYINT})
  </insert>
    <insert id="insertSelective" parameterType="cn.nanami52.warehouse.entity.User">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="userAuth != null">
                user_auth,
            </if>
            <if test="nickName != null">
                nick_name,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="isDel != null">
                is_del,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="userAuth != null">
                #{userAuth,jdbcType=INTEGER},
            </if>
            <if test="nickName != null">
                #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="isDel != null">
                #{isDel,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="cn.nanami52.warehouse.entity.User">
        update user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="userAuth != null">
                user_auth = #{userAuth,jdbcType=INTEGER},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=BIGINT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="isDel != null">
                is_del = #{isDel,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="cn.nanami52.warehouse.entity.User">
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      user_auth = #{userAuth,jdbcType=INTEGER},
      nick_name = #{nickName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      is_del = #{isDel,jdbcType=TINYINT}
    where id = #{id,jdbcType=VARCHAR}
  </update>
    <select id="select" resultMap="BaseResultMap">
        SELECT
        `user`.`id` AS `id`,
        `user`.`username` AS `username`,
        `user`.`user_auth` AS `user_auth`,
        `user`.`nick_name` AS `nick_name`,
        `user`.`create_time` AS `create_time`,
        `user`.`status` AS `status`,
        `user`.`is_del` AS `is_del`,
        group_concat(`user_auth`.`groupId`) AS `groupId`,
        group_concat(`user_group`.`group_name`) AS `group_name`
        FROM
        (
        (
        `user`
        LEFT JOIN `user_auth` ON (
        (
        `user`.`id` = `user_auth`.`userId`
        )
        )
        )
        LEFT JOIN `user_group` ON (
        (
        `user_auth`.`groupId` = `user_group`.`id`
        )
        )
        )
        where 1=1
        <if test="id">and user_auth.userId=#{id}</if>
        <if test="nickName">and nick_name=#{nickName}</if>
        <if test="groupId">and groupId=#{groupId}</if>
        GROUP BY
        `user`.id
    </select>
</mapper>